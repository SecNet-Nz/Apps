//
//  StartupViewController.m
//  Interface 
//
//  Generated by Interface 2
//  http://lesscode.co.nz/interface
//

#import "StartupViewController.h"
#import "SettingsViewController.h"
#import "LoginScreenViewController.h"

#import "GradientView.h"
#import "MKMapView+ZoomLevel.h"

@implementation StartupViewController


- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation {
    return UIInterfaceOrientationIsPortrait(toInterfaceOrientation);
}

- (void)viewDidLoad {
  [super viewDidLoad];
  
  // ----------------------------;
  // View Controller Root View;
  // ----------------------------;
  
  UIView *contentView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 320, 460)];
  contentView.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight;
  
  // ----------------------------;
  // MKMapView -> mapView1;
  // ----------------------------;
  
  MKMapView *mapView1 = [[MKMapView alloc] initWithFrame:CGRectMake(0, 48, 320, 368)];
  [contentView addSubview:mapView1];
  mapView1.alpha = 1.0;
  mapView1.autoresizingMask = UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleBottomMargin;
  mapView1.mapType = MKMapTypeStandard;
  mapView1.showsUserLocation = YES;
  [mapView1 setCenterCoordinate:CLLocationCoordinate2DMake(37.16031654673525, -109.6875) zoomLevel:6 animated:NO];
  [mapView1 release];
  
  
  // ----------------------------;
  // UIToolbar -> toolbar1;
  // ----------------------------;
  
  UIToolbar *toolbar1 = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 0, 320, 48)];
  [contentView addSubview:toolbar1];
  toolbar1.alpha = 1.0;
  toolbar1.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleTopMargin | UIViewAutoresizingFlexibleBottomMargin;
  toolbar1.barStyle = UIBarStyleDefault;
  [toolbar1 release];
  
  
  // ----------------------------;
  // Toolbar Button -> toolbarButtonItem1;
  // ----------------------------;
  
  UIBarButtonItem *toolbarButtonItem1 = [[[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@"StartupViewController_Image_1.png"] style:UIBarButtonItemStyleBordered target:nil action:nil] autorelease];
  toolbarButtonItem1.target = self;
  toolbarButtonItem1.action = @selector(didTap_toolbarButtonItem1:forEvent:);
  
  
  // ----------------------------;
  // Toolbar Flexible Space -> toolbarButtonItem2;
  // ----------------------------;
  
  UIBarButtonItem *toolbarButtonItem2 = [[[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil] autorelease];
  
  
  // ----------------------------;
  // Toolbar Button -> toolbarButtonItem3;
  // ----------------------------;
  
  UIBarButtonItem *toolbarButtonItem3 = [[[UIBarButtonItem alloc] initWithTitle:@"Lock" style:UIBarButtonItemStyleBordered target:nil action:nil] autorelease];
  
  
  // ----------------------------;
  // Toolbar Button -> toolbarButtonItem4;
  // ----------------------------;
  
  UIBarButtonItem *toolbarButtonItem4 = [[[UIBarButtonItem alloc] initWithTitle:@"POI" style:UIBarButtonItemStyleBordered target:nil action:nil] autorelease];
  
  
  // ----------------------------;
  // Toolbar Button -> toolbarButtonItem5;
  // ----------------------------;
  
  UIBarButtonItem *toolbarButtonItem5 = [[[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@"StartupViewController_Image_2.png"] style:UIBarButtonItemStyleBordered target:nil action:nil] autorelease];
  toolbarButtonItem5.target = self;
  toolbarButtonItem5.action = @selector(didTap_toolbarButtonItem5:forEvent:);
  
  toolbar1.items = [NSArray arrayWithObjects:toolbarButtonItem1, toolbarButtonItem2, toolbarButtonItem3, toolbarButtonItem4, toolbarButtonItem5, nil];
  
  // ----------------------------;
  // UIToolbar -> toolbar2;
  // ----------------------------;
  
  UIToolbar *toolbar2 = [[UIToolbar alloc] initWithFrame:CGRectMake(0, 416, 320, 44)];
  [contentView addSubview:toolbar2];
  toolbar2.alpha = 1.0;
  toolbar2.autoresizingMask = UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleTopMargin;
  toolbar2.barStyle = UIBarStyleDefault;
  [toolbar2 release];
  
  
  // ----------------------------;
  // Toolbar Button -> toolbarButtonItem6;
  // ----------------------------;
  
  UIBarButtonItem *toolbarButtonItem6 = [[[UIBarButtonItem alloc] initWithImage:[UIImage imageNamed:@"StartupViewController_Image_3.png"] style:UIBarButtonItemStyleBordered target:nil action:nil] autorelease];
  toolbarButtonItem6.target = self;
  toolbarButtonItem6.action = @selector(didTap_toolbarButtonItem6:forEvent:);
  
  
  // ----------------------------;
  // Toolbar Flexible Space -> toolbarButtonItem7;
  // ----------------------------;
  
  UIBarButtonItem *toolbarButtonItem7 = [[[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace target:nil action:nil] autorelease];
  
  
  // ----------------------------;
  // Toolbar Button -> toolbarButtonItem8;
  // ----------------------------;
  
  UIBarButtonItem *toolbarButtonItem8 = [[[UIBarButtonItem alloc] initWithTitle:@"Button" style:UIBarButtonItemStyleBordered target:nil action:nil] autorelease];
  
  toolbar2.items = [NSArray arrayWithObjects:toolbarButtonItem6, toolbarButtonItem7, toolbarButtonItem8, nil];
  
  // ----------------------------;
  // UIButton -> imageButton1;
  // ----------------------------;
  
  UIButton *imageButton1 = [UIButton buttonWithType:UIButtonTypeCustom];
  imageButton1.frame = CGRectMake(0, 376, 40, 40);
  [contentView addSubview:imageButton1];
  imageButton1.alpha = 1.0;
  imageButton1.autoresizingMask = UIViewAutoresizingFlexibleRightMargin | UIViewAutoresizingFlexibleBottomMargin;
  [imageButton1 setTitle:@"" forState:UIControlStateNormal];
  [imageButton1 setImage:[UIImage imageNamed:@"StartupViewController_Image_4.png"] forState:UIControlStateNormal];
  imageButton1.enabled = YES;
  [imageButton1 setTitleColor:[UIColor colorWithRed:1.0 green:1.0 blue:1.0 alpha:1.0] forState:UIControlStateNormal];
  
  
  contentView.frame = self.view.bounds;
  [self.view addSubview:contentView];
  [contentView release];
}

- (void)viewDidUnload {
  [super viewDidUnload];
}

- (void)dealloc {
  [super dealloc];
}

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];
    [[UIApplication sharedApplication] setStatusBarHidden:NO withAnimation:UIStatusBarAnimationFade];
    [[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleDefault animated:animated];
}

// ----------------
// Action
// ----------------

- (void)didTap_toolbarButtonItem1:(id)sender forEvent:(UIEvent *)event {
  SettingsViewController *controller = [[SettingsViewController alloc] init];
  [self.navigationController pushViewController:controller animated:YES];
  [controller release];
}
- (void)didTap_toolbarButtonItem5:(id)sender forEvent:(UIEvent *)event {
  LoginScreenViewController *controller = [[LoginScreenViewController alloc] init];
  [self.navigationController pushViewController:controller animated:YES];
  [controller release];
}
- (void)didTap_toolbarButtonItem6:(id)sender forEvent:(UIEvent *)event {
  UIAlertView *alertView = [[UIAlertView alloc] init];
  alertView.title = @"Mockup Error";
  alertView.message = @"Target Screen Not Found";
  [alertView addButtonWithTitle:@"OK"];
  [alertView show];
  [alertView release];
}




@end